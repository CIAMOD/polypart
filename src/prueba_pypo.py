import numpy as np
from pypoman import (
    compute_polytope_vertices,
    compute_polytope_halfspaces,
)  # pypoman->cdd->double description method
import cdd

points = np.array(
    [
        [0.23481936, 0.39538012, 0.68206639],
        [0.26038136, 0.40860470, 0.66073333],
        [0.25920424, 0.41091447, 0.65988989],
        [0.22993435, 0.40457437, 0.67881085],
        [0.26047210, 0.41092590, 0.66262064],
        [0.23720119, 0.40515930, 0.68745593],
    ]
)

A = [
    [9.65797166e-01, -2.23686228e-01, 1.31149936e-01],
    [4.08907017e-01, 8.76902245e-01, -2.52660848e-01],
    [9.59721259e-01, -2.67336081e-01, 8.64090495e-02],
    [4.73499042e-01, -1.04225605e-01, -8.74606014e-01],
    [2.72423792e-01, -9.43895187e-01, -1.86673921e-01],
    [4.40022381e-01, 4.11835327e-02, 8.97041928e-01],
    [1.80373725e-01, -9.66938256e-01, -1.80265718e-01],
    [-1.91094155e-01, 7.96501197e-01, -5.73645245e-01],
    [-8.94038546e-01, -1.98139398e-01, -4.01790814e-01],
    [-4.38468329e-01, -3.11220153e-01, -8.43141471e-01],
    [2.98293057e-01, 2.39044720e-02, -9.54174946e-01],
    [2.89518712e-01, 4.84647153e-02, -9.55944604e-01],
    [-1.13242514e-01, -6.87475567e-02, -9.91186111e-01],
    [-3.09253351e-03, 1.27354848e-01, -9.91852398e-01],
    [7.51205071e-02, 7.57593522e-02, 9.94292427e-01],
    [-9.86018866e-01, -1.59527509e-01, 4.81432212e-02],
    [-9.66921433e-01, -1.93613986e-01, -1.66061935e-01],
    [-4.16997159e-01, 1.82483038e-01, 8.90400646e-01],
    [-3.64110352e-01, 2.00315721e-01, 9.09558829e-01],
    [-3.09166028e-01, 9.40654325e-01, 1.39949302e-01],
    [-5.11727563e-02, 9.79789235e-01, 1.93376328e-01],
    [-3.99181970e-02, 9.97485450e-01, -5.85603577e-02],
    [-1.90995341e-02, 9.98496547e-01, -5.13794980e-02],
    [-3.41089120e-01, -9.09873716e-01, 2.36194905e-01],
    [-5.52327218e-01, -5.41295573e-01, 6.33982450e-01],
    [-6.95249292e-01, -1.14891796e-01, 7.09526812e-01],
    [-7.48513983e-01, -1.70817857e-01, 6.40740257e-01],
    [-7.12321447e-01, -2.11926200e-01, 6.69092999e-01],
    [-9.29357028e-01, -2.44812729e-01, 2.76337190e-01],
    [-8.98931444e-01, -2.49417231e-01, 3.60157332e-01],
    [-9.25851634e-01, -2.57736414e-01, 2.76352478e-01],
    [-9.04427173e-01, -2.86977631e-01, 3.15682320e-01],
    [8.97042498e00, 4.42707072e00, -8.16531772e00],
    [2.12858119e00, -9.81605897e00, -7.97056914e00],
    [-1.56560282e00, 9.28115452e00, 6.88039637e-01],
    [8.11114078e00, -3.66013547e00, 8.57622703e00],
    [4.13578457e00, 3.42670909e00, -3.45036912e00],
    [-6.14880310e00, -7.92182600e00, 3.63993050e00],
    [-9.84533294e-01, -4.29191845e00, -3.20394753e00],
    [5.21570097e00, 1.22554395e00, 5.41934360e00],
    [-5.01229503e00, -6.13669479e00, -9.81010284e00],
    [4.84116745e00, -3.19968092e00, -6.34444400e00],
    [-1.68628624e00, -8.02316021e00, 9.09107239e00],
    [2.64433735e00, -2.64611661e00, -2.67059422e00],
    [7.26206852e00, 2.46596254e00, -3.38203950e00],
    [4.52182667e00, 9.51704159e00, 3.26006966e-01],
    [8.80917169e00, 9.07857154e00, 8.29728780e00],
    [4.82440037e00, -3.25044569e00, 3.76577848e00],
]
b = [
    8.06453636e-01,
    1.03052049e00,
    7.57858316e-01,
    2.13004411e-01,
    -7.59066291e-03,
    1.18246533e00,
    -6.70277426e-02,
    5.69255438e-01,
    -3.14892279e-01,
    -3.74307416e-01,
    1.23232100e-01,
    1.33187674e-01,
    -1.45001258e-01,
    2.77846267e-02,
    1.01912426e00,
    -1.66510847e-01,
    -2.52281650e-01,
    6.69074948e-01,
    7.19860640e-01,
    8.80940485e-01,
    1.05388369e00,
    8.90506894e-01,
    9.04521929e-01,
    -3.11573767e-02,
    2.12675772e-01,
    2.86608094e-01,
    1.93723839e-01,
    2.20133327e-01,
    -9.99209260e-02,
    -5.17564622e-02,
    -1.03201930e-01,
    -8.75304130e-02,
    7.51767183e00,
    -5.54464462e00,
    3.86198019e00,
    9.15686410e00,
    9.19615610e-01,
    -1.40046659e00,
    -3.17599111e00,
    6.26577295e00,
    -1.02944525e01,
    -2.52278239e00,
    3.22748806e00,
    -1.47017842e00,
    6.63884937e-01,
    5.40200151e00,
    1.18681455e01,
    2.41621191e00,
]

A, b = np.array(A), np.array(b).reshape(-1, 1)
mat = cdd.matrix_from_array(np.hstack([b, -A]))
print(cdd.redundant_rows(mat))
# Remove redundant rows
redundant_rows = list(cdd.redundant_rows(mat))
A = np.delete(A, redundant_rows, axis=0)
b = np.delete(b, redundant_rows, axis=0)

print("A after removing redundant rows:")
print(A)
print("b after removing redundant rows:")
print(b)
# Calculate the convex hull of the points
from scipy.spatial import ConvexHull

hull = ConvexHull(points)
# Extract the vertices of the convex hull
vertices = points[hull.vertices]
print("Vertices of the convex hull:")
print(vertices)

normal = np.array([4.70142088, 6.06961861, -4.35930855])
offset = 0.7133942451297228  # Hyperplane equation: normalÂ·x = offset

# Compute the halfspaces of the polytope
real_vertices = np.array(compute_polytope_vertices(A, b))
print("Real Vertices of the polytope:")
print(real_vertices)

A1 = np.concatenate((A, normal.reshape(1, -1)), axis=0)
b1 = np.concatenate((b, np.array([offset]).reshape(-1, 1)), axis=0)
# Compute the vertices of the polytope
vertices = compute_polytope_vertices(A1, b1)
print("Vertices of the polytope with h1:")
print(vertices)

A2 = np.concatenate((A, -normal.reshape(1, -1)), axis=0)
b2 = np.concatenate((b, -np.array([offset]).reshape(-1, 1)), axis=0)
# Compute the vertices of the polytope
vertices2 = compute_polytope_vertices(A2, b2)
print("Vertices of the polytope with h2:")
print(vertices2)
